generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  picks         Pick[]
  accounts      Account[]
  sessions      Session[]
  
  @@index([email])
  @@index([username])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}

model Game {
  id             String    @id @default(cuid())
  week           Int
  season         Int
  weekType       String    @default("preseason") // preseason, regular, playoffs
  homeTeam       String
  awayTeam       String
  originalSpread Float
  modifiedSpread Float     // originalSpread + 6 for home team
  homeScore      Int?
  awayScore      Int?
  gameTime       DateTime
  isComplete     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  picks          Pick[]
  
  @@index([season, weekType, week])
  @@index([gameTime])
  @@index([isComplete])
}

model Pick {
  id         String    @id @default(cuid())
  userId     String
  gameId     String
  pickedTeam String    // "home" or "away"
  isCorrect  Boolean?  // null until game completes
  points     Float?    // 0, 0.5, or 1
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  game       Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@unique([userId, gameId])
  @@index([userId])
  @@index([gameId])
  @@index([userId, createdAt])
}

model Leaderboard {
  id            String   @id @default(cuid())
  userId        String
  week          Int
  season        Int
  weekType      String   @default("preseason")
  totalPicks    Int      @default(0)
  correctPicks  Int      @default(0)
  ties          Int      @default(0)
  totalPoints   Float    @default(0)
  winPercentage Float    @default(0)
  rank          Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([userId, season, weekType, week])
  @@index([season, weekType, week, totalPoints])
  @@index([userId])
}